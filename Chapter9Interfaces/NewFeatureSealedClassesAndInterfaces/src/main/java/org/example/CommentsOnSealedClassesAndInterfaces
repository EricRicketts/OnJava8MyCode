What is the purpose of sealing classes and interfaces?

The purpose is to allow the Base class or Base Interface to constrain what classes can be derived from it.
This allows one to model a fixed set of kinds of values.  One ensures the "fixed set of kinds of values" by
making the permitted classes "final".  This means no subclasses can be derived from the permitted classes.

In my examples I have the permitted classes in different files, this is what the "permits" keyword allows.
If one has the base class or interface in the same file as the permitted classes then the "permits" keyword
is not needed.

In the first book example (On Java 8) and in my first example the class Base was constrained to only two
types of subclasses, D1 and D2.  Thus if we were to try "final class D3 extends Base" we would get a compiler
error.  This kind of constraint ensures that future code only concern itself with D1 and D2 types.

In my second example with Interface Ifc and classes Imp1 and Imp2 I showed that one can seal and Interface
as well as a class.

In the third example I demonstrate one can also seal and Abstract class (AC and X is permitted).

As demonstrated by Bottom, Level1, Level2, and Level3 one can also "seal" the permitted classes.  This does
not violate the essence of constraining the types that can be instantiated. As Level2 is a type of Level1
and Level3 is a type of Level2.  Furthermore, to begin with, Level1 is a type of Bottom.  So Java does
allow sealed sets of subclasses.

In the final demonstration I use the non-sealed keyword in the declaration of the Sub2 class.  In this case we
see that Sub2 allows for the declaration of any number of subclasses.  This might seem to violate the
restriction on the number of types one can create.  In reality, we strictly limit the immediate subclasses
of the sealed class Super.  As such, Super only allows the direct subclasses of Sub1 and Sub2.  In my example
we created the Any1 and Any2 classes however, these are subclasses fo Sub2 and Sub2 is one of the permitted
classes of Super.  Thus Any1 and Any2 are types of Sub2.

